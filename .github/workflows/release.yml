name: Build Linux Release

on:
  push:
    tags:
      - 'v*'
  release:
    types:
      - published

jobs:
  build:
    name: Build Linux Archive
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Capture version from tag
        id: vars
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          # If triggered by a release event, github.event.release.tag_name is set.
          # Otherwise (tag push), fall back to GITHUB_REF.
          if [ -n "${RELEASE_TAG}" ]; then
            TAG_NAME="${RELEASE_TAG}"
          else
            TAG_NAME="${GITHUB_REF##*/}"
          fi
          echo "tag_name=${TAG_NAME}" >> "$GITHUB_OUTPUT"
          echo "release_name=EDMC-ModernOverlay-${TAG_NAME}" >> "$GITHUB_OUTPUT"

      - name: Export tracked files
        run: |
          STAGING_ROOT="$RUNNER_TEMP/release"
          CODE_DIR="$STAGING_ROOT/EDMC-ModernOverlay"
          mkdir -p "$CODE_DIR"
          git archive HEAD | tar -x -C "$CODE_DIR"
          rm -rf \
            "$CODE_DIR/.github" \
            "$CODE_DIR/.git" \
            "$CODE_DIR/.vscode" \
            "$CODE_DIR/.gitignore" \
            "$CODE_DIR/.codex" \
            "$CODE_DIR"/*.code-workspace \
            "$CODE_DIR"/*.code-workspace* \
            "$CODE_DIR"/__pycache__ \
            "$CODE_DIR"/__pycache__/* \
            "$CODE_DIR"/scripts \
            "$CODE_DIR"/README.md \
            "$CODE_DIR"/FAQ.md
          find "$CODE_DIR" -name '__pycache__' -type d -prune -exec rm -rf {} +
          find "$CODE_DIR" -name '*.pyc' -delete
          find "$CODE_DIR" -name '*.pyo' -delete
          mkdir -p dist

      - name: Stage install scripts at archive root
        run: |
          STAGING_ROOT="$RUNNER_TEMP/release"
          cp "$GITHUB_WORKSPACE/scripts/install_linux.sh" "$STAGING_ROOT/install_linux.sh"
          cp "$GITHUB_WORKSPACE/scripts/install-eurocaps.sh" "$STAGING_ROOT/install_eurocaps.sh"
          cp "$GITHUB_WORKSPACE/scripts/install_windows.ps1" "$STAGING_ROOT/install_windows.ps1"
          chmod +x "$STAGING_ROOT/install_linux.sh" "$STAGING_ROOT/install_eurocaps.sh"

      - name: Create tarball
        run: |
          STAGING_ROOT="$RUNNER_TEMP/release"
          ARCHIVE_NAME="${{ steps.vars.outputs.release_name }}.tar.gz"
          tar -czf "dist/${ARCHIVE_NAME}" -C "$STAGING_ROOT" EDMC-ModernOverlay install_linux.sh install_eurocaps.sh install_windows.ps1

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag_name }}
          name: ${{ steps.vars.outputs.release_name }}
          files: dist/${{ steps.vars.outputs.release_name }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
